/* tslint:disable */
/* eslint-disable */
/**
 * sctgdesk-api-server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AbGetResponse } from '../models';
import { AbPeer } from '../models';
import { AbPeersResponse } from '../models';
import { AbPersonal } from '../models';
import { AbRuleAddRequest } from '../models';
import { AbRuleDeleteRequest } from '../models';
import { AbRulesResponse } from '../models';
import { AbSettingsResponse } from '../models';
import { AbSharedAddRequest } from '../models';
import { AbSharedProfilesResponse } from '../models';
import { AbTag } from '../models';
import { AbTagRenameRequest } from '../models';
/**
 * AddressBookApi - axios parameter creator
 * @export
 */
export const AddressBookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This function is an API endpoint that adds a peer to an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the new peer information.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
         * @summary Add peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPeerAdd: async (body: AbPeer, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abPeerAdd.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abPeerAdd.');
            }
            const localVarPath = `/api/ab/peer/add/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that deletes a peer from an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing an array of peer IDs to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
         * @summary Delete peer
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPeerDelete: async (body: Array<string>, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abPeerDelete.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abPeerDelete.');
            }
            const localVarPath = `/api/ab/peer/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that updates a peer in an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the updated peer information.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
         * @summary Update peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPeerUpdate: async (body: AbPeer, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abPeerUpdate.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abPeerUpdate.');
            }
            const localVarPath = `/api/ab/peer/update/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that lists the peers in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `current`: The current page number for pagination. This parameter is currently unused.  - `pageSize`: The number of items per page for pagination. This parameter is currently unused.  - `ab`: The identifier of the address book.  ## Returns  If successful, this function returns a `Json<AbPeersResponse>` object containing the peers in the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         * @summary List peers
         * @param {number} current 
         * @param {number} page_size 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPeers: async (current: number, page_size: number, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'current' is not null or undefined
            if (current === null || current === undefined) {
                throw new RequiredError('current','Required parameter current was null or undefined when calling abPeers.');
            }
            // verify required parameter 'page_size' is not null or undefined
            if (page_size === null || page_size === undefined) {
                throw new RequiredError('page_size','Required parameter page_size was null or undefined when calling abPeers.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abPeers.');
            }
            const localVarPath = `/api/ab/peers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['pageSize'] = page_size;
            }

            if (ab !== undefined) {
                localVarQueryParameter['ab'] = ab;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that retrieves the personal address book of the authenticated user. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbPersonal>` object.  <br> If the user is not authorized to access their personal address book, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the user is not authorized to access their personal address book.  # Example  POST /api/ab/personal
         * @summary Get Personal Address Book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPersonal: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ab/personal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that allows an authenticated user to retrieve their address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbGetResponse>` object, which includes the address book information.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the user is not authorized.  # Example  POST /api/ab/get
         * @summary Get the User's Address Book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ab/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that adds a new rule to a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `request`: The request containing the details of the rule to be added.  ## Returns  If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully added. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.  ## Errors  This function will return an error if the system is in maintenance mode.
         * @summary Add a Rule
         * @param {AbRuleAddRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abRuleAdd: async (body: AbRuleAddRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abRuleAdd.');
            }
            const localVarPath = `/api/ab/rule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization_admin required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that deletes a rule from a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `request`: The request containing the GUID of the rule to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully deleted. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.  ## Errors  This function will return an error if the system is in maintenance mode.
         * @summary Delete a Rule
         * @param {AbRuleDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abRuleDelete: async (body: AbRuleDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abRuleDelete.');
            }
            const localVarPath = `/api/ab/rule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization_admin required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that lists the rules attached to a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `current`: The current page number for pagination. This parameter is currently unused.  - `pageSize`: The number of items per page for pagination. This parameter is currently unused.  - `ab`: The identifier of the shared address book.  ## Returns  If successful, this function returns a `Json<AbRulesResponse>` object containing the rules for the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         * @summary List the rules
         * @param {number} current 
         * @param {number} page_size 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abRules: async (current: number, page_size: number, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'current' is not null or undefined
            if (current === null || current === undefined) {
                throw new RequiredError('current','Required parameter current was null or undefined when calling abRules.');
            }
            // verify required parameter 'page_size' is not null or undefined
            if (page_size === null || page_size === undefined) {
                throw new RequiredError('page_size','Required parameter page_size was null or undefined when calling abRules.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abRules.');
            }
            const localVarPath = `/api/ab/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['pageSize'] = page_size;
            }

            if (ab !== undefined) {
                localVarQueryParameter['ab'] = ab;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that retrieves the settings for an address book.<br> TODO: Implement the settings for an address book.
         * @summary Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ab/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that retrieves the shared profiles from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbSharedProfilesResponse>` object containing the shared profiles in the address book.  <br> rule: 1: read, 2: write, 3: full control  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.  # Example  {\"data\":[{\"guid\":\"018fab24-0ae5-731c-be23-88aa4518ea26\",\"name\":\"shared profile\",\"owner\":\"admin\",\"rule\":3}],\"total\":2}
         * @summary Get Shared Profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abShared: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ab/shared/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * TODO: Add shared profile
         * @summary Add shared profile
         * @param {AbSharedAddRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abSharedAdd: async (body: AbSharedAddRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abSharedAdd.');
            }
            const localVarPath = `/api/ab/shared/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization_admin required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * TODO: Delete shared profiles
         * @summary Delete shared profiles
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abSharedDelete: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abSharedDelete.');
            }
            const localVarPath = `/api/ab/shared`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization_admin required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that adds a new tag to an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the new tag to be added.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag already exists or the user is not authorized to add it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag already exists or the user is not authorized to add it.  # Example  POST /api/ab/tag/add/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"name\": \"tag1\", \"color\": \"#FF0000\"}
         * @summary Add a Tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTagAdd: async (body: AbTag, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abTagAdd.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTagAdd.');
            }
            const localVarPath = `/api/ab/tag/add/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that deletes a tag from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing an array of tag names to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the request is empty or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the request is empty or the user is not authorized to access it.  # Example  DELETE /api/ab/tag/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  [\"tag1\", \"tag2\"]
         * @summary Delete a Tag
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTagDelete: async (body: Array<string>, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abTagDelete.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTagDelete.');
            }
            const localVarPath = `/api/ab/tag/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that renames a tag in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the old and new names of the tag.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to access it.  # Example  PUT /api/ab/tag/rename/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"old\": \"tag1\", \"new\": \"tag2\"}
         * @summary Rename a Tag
         * @param {AbTagRenameRequest} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTagRename: async (body: AbTagRenameRequest, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abTagRename.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTagRename.');
            }
            const localVarPath = `/api/ab/tag/rename/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that updates a tag in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the updated tag.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to update it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to update it.  # Example  PUT /api/ab/tag/update/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"name\": \"tag1\", \"color\": \"#FF0000\"}
         * @summary Update a Tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTagUpdate: async (body: AbTag, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abTagUpdate.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTagUpdate.');
            }
            const localVarPath = `/api/ab/tag/update/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that retrieves all tags from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  ## Returns  If successful, this function returns a JSON array of `AbTag` objects.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::NotFound` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.  # Example  POST /api/ab/tags/018fab24-0ae5-731c-be23-88aa4518ea26
         * @summary Get the Tags
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTags: async (ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTags.');
            }
            const localVarPath = `/api/ab/tags/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressBookApi - functional programming interface
 * @export
 */
export const AddressBookApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This function is an API endpoint that adds a peer to an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the new peer information.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
         * @summary Add peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerAdd(body: AbPeer, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPeerAdd(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that deletes a peer from an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing an array of peer IDs to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
         * @summary Delete peer
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPeerDelete(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that updates a peer in an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the updated peer information.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
         * @summary Update peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerUpdate(body: AbPeer, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPeerUpdate(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that lists the peers in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `current`: The current page number for pagination. This parameter is currently unused.  - `pageSize`: The number of items per page for pagination. This parameter is currently unused.  - `ab`: The identifier of the address book.  ## Returns  If successful, this function returns a `Json<AbPeersResponse>` object containing the peers in the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         * @summary List peers
         * @param {number} current 
         * @param {number} page_size 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeers(current: number, page_size: number, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbPeersResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPeers(current, page_size, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that retrieves the personal address book of the authenticated user. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbPersonal>` object.  <br> If the user is not authorized to access their personal address book, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the user is not authorized to access their personal address book.  # Example  POST /api/ab/personal
         * @summary Get Personal Address Book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPersonal(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbPersonal>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPersonal(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that allows an authenticated user to retrieve their address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbGetResponse>` object, which includes the address book information.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the user is not authorized.  # Example  POST /api/ab/get
         * @summary Get the User's Address Book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbGetResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that adds a new rule to a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `request`: The request containing the details of the rule to be added.  ## Returns  If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully added. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.  ## Errors  This function will return an error if the system is in maintenance mode.
         * @summary Add a Rule
         * @param {AbRuleAddRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abRuleAdd(body: AbRuleAddRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abRuleAdd(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that deletes a rule from a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `request`: The request containing the GUID of the rule to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully deleted. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.  ## Errors  This function will return an error if the system is in maintenance mode.
         * @summary Delete a Rule
         * @param {AbRuleDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abRuleDelete(body: AbRuleDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abRuleDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that lists the rules attached to a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `current`: The current page number for pagination. This parameter is currently unused.  - `pageSize`: The number of items per page for pagination. This parameter is currently unused.  - `ab`: The identifier of the shared address book.  ## Returns  If successful, this function returns a `Json<AbRulesResponse>` object containing the rules for the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         * @summary List the rules
         * @param {number} current 
         * @param {number} page_size 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abRules(current: number, page_size: number, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbRulesResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abRules(current, page_size, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that retrieves the settings for an address book.<br> TODO: Implement the settings for an address book.
         * @summary Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbSettingsResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that retrieves the shared profiles from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbSharedProfilesResponse>` object containing the shared profiles in the address book.  <br> rule: 1: read, 2: write, 3: full control  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.  # Example  {\"data\":[{\"guid\":\"018fab24-0ae5-731c-be23-88aa4518ea26\",\"name\":\"shared profile\",\"owner\":\"admin\",\"rule\":3}],\"total\":2}
         * @summary Get Shared Profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abShared(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbSharedProfilesResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abShared(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * TODO: Add shared profile
         * @summary Add shared profile
         * @param {AbSharedAddRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abSharedAdd(body: AbSharedAddRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbSharedProfilesResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abSharedAdd(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * TODO: Delete shared profiles
         * @summary Delete shared profiles
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abSharedDelete(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abSharedDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that adds a new tag to an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the new tag to be added.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag already exists or the user is not authorized to add it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag already exists or the user is not authorized to add it.  # Example  POST /api/ab/tag/add/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"name\": \"tag1\", \"color\": \"#FF0000\"}
         * @summary Add a Tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagAdd(body: AbTag, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTagAdd(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that deletes a tag from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing an array of tag names to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the request is empty or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the request is empty or the user is not authorized to access it.  # Example  DELETE /api/ab/tag/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  [\"tag1\", \"tag2\"]
         * @summary Delete a Tag
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTagDelete(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that renames a tag in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the old and new names of the tag.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to access it.  # Example  PUT /api/ab/tag/rename/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"old\": \"tag1\", \"new\": \"tag2\"}
         * @summary Rename a Tag
         * @param {AbTagRenameRequest} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagRename(body: AbTagRenameRequest, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTagRename(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that updates a tag in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the updated tag.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to update it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to update it.  # Example  PUT /api/ab/tag/update/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"name\": \"tag1\", \"color\": \"#FF0000\"}
         * @summary Update a Tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagUpdate(body: AbTag, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTagUpdate(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that retrieves all tags from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  ## Returns  If successful, this function returns a JSON array of `AbTag` objects.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::NotFound` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.  # Example  POST /api/ab/tags/018fab24-0ae5-731c-be23-88aa4518ea26
         * @summary Get the Tags
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTags(ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<AbTag>>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTags(ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AddressBookApi - factory interface
 * @export
 */
export const AddressBookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This function is an API endpoint that adds a peer to an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the new peer information.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
         * @summary Add peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerAdd(body: AbPeer, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abPeerAdd(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that deletes a peer from an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing an array of peer IDs to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
         * @summary Delete peer
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abPeerDelete(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that updates a peer in an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the updated peer information.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
         * @summary Update peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerUpdate(body: AbPeer, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abPeerUpdate(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that lists the peers in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `current`: The current page number for pagination. This parameter is currently unused.  - `pageSize`: The number of items per page for pagination. This parameter is currently unused.  - `ab`: The identifier of the address book.  ## Returns  If successful, this function returns a `Json<AbPeersResponse>` object containing the peers in the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         * @summary List peers
         * @param {number} current 
         * @param {number} page_size 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeers(current: number, page_size: number, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AbPeersResponse>> {
            return AddressBookApiFp(configuration).abPeers(current, page_size, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that retrieves the personal address book of the authenticated user. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbPersonal>` object.  <br> If the user is not authorized to access their personal address book, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the user is not authorized to access their personal address book.  # Example  POST /api/ab/personal
         * @summary Get Personal Address Book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPersonal(options?: AxiosRequestConfig): Promise<AxiosResponse<AbPersonal>> {
            return AddressBookApiFp(configuration).abPersonal(options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that allows an authenticated user to retrieve their address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbGetResponse>` object, which includes the address book information.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the user is not authorized.  # Example  POST /api/ab/get
         * @summary Get the User's Address Book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPost(options?: AxiosRequestConfig): Promise<AxiosResponse<AbGetResponse>> {
            return AddressBookApiFp(configuration).abPost(options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that adds a new rule to a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `request`: The request containing the details of the rule to be added.  ## Returns  If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully added. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.  ## Errors  This function will return an error if the system is in maintenance mode.
         * @summary Add a Rule
         * @param {AbRuleAddRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abRuleAdd(body: AbRuleAddRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abRuleAdd(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that deletes a rule from a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `request`: The request containing the GUID of the rule to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully deleted. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.  ## Errors  This function will return an error if the system is in maintenance mode.
         * @summary Delete a Rule
         * @param {AbRuleDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abRuleDelete(body: AbRuleDeleteRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abRuleDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that lists the rules attached to a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `current`: The current page number for pagination. This parameter is currently unused.  - `pageSize`: The number of items per page for pagination. This parameter is currently unused.  - `ab`: The identifier of the shared address book.  ## Returns  If successful, this function returns a `Json<AbRulesResponse>` object containing the rules for the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         * @summary List the rules
         * @param {number} current 
         * @param {number} page_size 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abRules(current: number, page_size: number, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AbRulesResponse>> {
            return AddressBookApiFp(configuration).abRules(current, page_size, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that retrieves the settings for an address book.<br> TODO: Implement the settings for an address book.
         * @summary Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abSettings(options?: AxiosRequestConfig): Promise<AxiosResponse<AbSettingsResponse>> {
            return AddressBookApiFp(configuration).abSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that retrieves the shared profiles from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbSharedProfilesResponse>` object containing the shared profiles in the address book.  <br> rule: 1: read, 2: write, 3: full control  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.  # Example  {\"data\":[{\"guid\":\"018fab24-0ae5-731c-be23-88aa4518ea26\",\"name\":\"shared profile\",\"owner\":\"admin\",\"rule\":3}],\"total\":2}
         * @summary Get Shared Profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abShared(options?: AxiosRequestConfig): Promise<AxiosResponse<AbSharedProfilesResponse>> {
            return AddressBookApiFp(configuration).abShared(options).then((request) => request(axios, basePath));
        },
        /**
         * TODO: Add shared profile
         * @summary Add shared profile
         * @param {AbSharedAddRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abSharedAdd(body: AbSharedAddRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AbSharedProfilesResponse>> {
            return AddressBookApiFp(configuration).abSharedAdd(body, options).then((request) => request(axios, basePath));
        },
        /**
         * TODO: Delete shared profiles
         * @summary Delete shared profiles
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abSharedDelete(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abSharedDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that adds a new tag to an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the new tag to be added.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag already exists or the user is not authorized to add it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag already exists or the user is not authorized to add it.  # Example  POST /api/ab/tag/add/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"name\": \"tag1\", \"color\": \"#FF0000\"}
         * @summary Add a Tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagAdd(body: AbTag, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abTagAdd(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that deletes a tag from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing an array of tag names to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the request is empty or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the request is empty or the user is not authorized to access it.  # Example  DELETE /api/ab/tag/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  [\"tag1\", \"tag2\"]
         * @summary Delete a Tag
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abTagDelete(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that renames a tag in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the old and new names of the tag.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to access it.  # Example  PUT /api/ab/tag/rename/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"old\": \"tag1\", \"new\": \"tag2\"}
         * @summary Rename a Tag
         * @param {AbTagRenameRequest} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagRename(body: AbTagRenameRequest, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abTagRename(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that updates a tag in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the updated tag.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to update it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to update it.  # Example  PUT /api/ab/tag/update/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"name\": \"tag1\", \"color\": \"#FF0000\"}
         * @summary Update a Tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagUpdate(body: AbTag, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abTagUpdate(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that retrieves all tags from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  ## Returns  If successful, this function returns a JSON array of `AbTag` objects.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::NotFound` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.  # Example  POST /api/ab/tags/018fab24-0ae5-731c-be23-88aa4518ea26
         * @summary Get the Tags
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTags(ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AbTag>>> {
            return AddressBookApiFp(configuration).abTags(ab, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressBookApi - object-oriented interface
 * @export
 * @class AddressBookApi
 * @extends {BaseAPI}
 */
export class AddressBookApi extends BaseAPI {
    /**
     * This function is an API endpoint that adds a peer to an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the new peer information.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
     * @summary Add peer
     * @param {AbPeer} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPeerAdd(body: AbPeer, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abPeerAdd(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that deletes a peer from an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing an array of peer IDs to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
     * @summary Delete peer
     * @param {Array<string>} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPeerDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abPeerDelete(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that updates a peer in an address book.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the updated peer information.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.
     * @summary Update peer
     * @param {AbPeer} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPeerUpdate(body: AbPeer, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abPeerUpdate(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that lists the peers in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `current`: The current page number for pagination. This parameter is currently unused.  - `pageSize`: The number of items per page for pagination. This parameter is currently unused.  - `ab`: The identifier of the address book.  ## Returns  If successful, this function returns a `Json<AbPeersResponse>` object containing the peers in the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
     * @summary List peers
     * @param {number} current 
     * @param {number} page_size 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPeers(current: number, page_size: number, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AbPeersResponse>> {
        return AddressBookApiFp(this.configuration).abPeers(current, page_size, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that retrieves the personal address book of the authenticated user. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbPersonal>` object.  <br> If the user is not authorized to access their personal address book, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the user is not authorized to access their personal address book.  # Example  POST /api/ab/personal
     * @summary Get Personal Address Book
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPersonal(options?: AxiosRequestConfig) : Promise<AxiosResponse<AbPersonal>> {
        return AddressBookApiFp(this.configuration).abPersonal(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that allows an authenticated user to retrieve their address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbGetResponse>` object, which includes the address book information.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the user is not authorized.  # Example  POST /api/ab/get
     * @summary Get the User's Address Book
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<AbGetResponse>> {
        return AddressBookApiFp(this.configuration).abPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that adds a new rule to a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `request`: The request containing the details of the rule to be added.  ## Returns  If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully added. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.  ## Errors  This function will return an error if the system is in maintenance mode.
     * @summary Add a Rule
     * @param {AbRuleAddRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abRuleAdd(body: AbRuleAddRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abRuleAdd(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that deletes a rule from a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `request`: The request containing the GUID of the rule to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully deleted. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.  ## Errors  This function will return an error if the system is in maintenance mode.
     * @summary Delete a Rule
     * @param {AbRuleDeleteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abRuleDelete(body: AbRuleDeleteRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abRuleDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that lists the rules attached to a shared address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `current`: The current page number for pagination. This parameter is currently unused.  - `pageSize`: The number of items per page for pagination. This parameter is currently unused.  - `ab`: The identifier of the shared address book.  ## Returns  If successful, this function returns a `Json<AbRulesResponse>` object containing the rules for the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
     * @summary List the rules
     * @param {number} current 
     * @param {number} page_size 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abRules(current: number, page_size: number, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AbRulesResponse>> {
        return AddressBookApiFp(this.configuration).abRules(current, page_size, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that retrieves the settings for an address book.<br> TODO: Implement the settings for an address book.
     * @summary Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abSettings(options?: AxiosRequestConfig) : Promise<AxiosResponse<AbSettingsResponse>> {
        return AddressBookApiFp(this.configuration).abSettings(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that retrieves the shared profiles from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<AbSharedProfilesResponse>` object containing the shared profiles in the address book.  <br> rule: 1: read, 2: write, 3: full control  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.  # Example  {\"data\":[{\"guid\":\"018fab24-0ae5-731c-be23-88aa4518ea26\",\"name\":\"shared profile\",\"owner\":\"admin\",\"rule\":3}],\"total\":2}
     * @summary Get Shared Profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abShared(options?: AxiosRequestConfig) : Promise<AxiosResponse<AbSharedProfilesResponse>> {
        return AddressBookApiFp(this.configuration).abShared(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * TODO: Add shared profile
     * @summary Add shared profile
     * @param {AbSharedAddRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abSharedAdd(body: AbSharedAddRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<AbSharedProfilesResponse>> {
        return AddressBookApiFp(this.configuration).abSharedAdd(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * TODO: Delete shared profiles
     * @summary Delete shared profiles
     * @param {Array<string>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abSharedDelete(body: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abSharedDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that adds a new tag to an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the new tag to be added.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag already exists or the user is not authorized to add it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag already exists or the user is not authorized to add it.  # Example  POST /api/ab/tag/add/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"name\": \"tag1\", \"color\": \"#FF0000\"}
     * @summary Add a Tag
     * @param {AbTag} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTagAdd(body: AbTag, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abTagAdd(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that deletes a tag from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing an array of tag names to be deleted.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the request is empty or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the request is empty or the user is not authorized to access it.  # Example  DELETE /api/ab/tag/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  [\"tag1\", \"tag2\"]
     * @summary Delete a Tag
     * @param {Array<string>} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTagDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abTagDelete(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that renames a tag in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the old and new names of the tag.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to access it.  # Example  PUT /api/ab/tag/rename/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"old\": \"tag1\", \"new\": \"tag2\"}
     * @summary Rename a Tag
     * @param {AbTagRenameRequest} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTagRename(body: AbTagRenameRequest, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abTagRename(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that updates a tag in an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  - `request`: A JSON object containing the updated tag.  ## Returns  If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to update it, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to update it.  # Example  PUT /api/ab/tag/update/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json  {\"name\": \"tag1\", \"color\": \"#FF0000\"}
     * @summary Update a Tag
     * @param {AbTag} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTagUpdate(body: AbTag, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abTagUpdate(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that retrieves all tags from an address book. It is tagged with \"address book\" for OpenAPI documentation.  ## Parameters  - `ab`: The identifier of the address book.  ## Returns  If successful, this function returns a JSON array of `AbTag` objects.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::NotFound` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.  # Example  POST /api/ab/tags/018fab24-0ae5-731c-be23-88aa4518ea26
     * @summary Get the Tags
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTags(ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<AbTag>>> {
        return AddressBookApiFp(this.configuration).abTags(ab, options).then((request) => request(this.axios, this.basePath));
    }
}
